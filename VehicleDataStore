local DATASTORE_KEY = "TestData" --change this to your data name
local ServerStorage = game:GetService("ServerStorage")
local DataSave = game:GetService("DataStoreService"):GetDataStore(DATASTORE_KEY)

local function saveModelToDataStore(player)
	local SaveFolder = ServerStorage.PurchasedVehicles:FindFirstChild(player.UserId)
	if SaveFolder then
		local dataToSave = {}
		for _, car in ipairs(SaveFolder:GetChildren()) do
			dataToSave[car.Name] = true
		end

		local success, errorMessage = pcall(function()
			DataSave:SetAsync(tostring(player.UserId), dataToSave)
			print("Saved data for player:", player.Name)
		end)

		if not success then
			warn("Failed to save data for player:", player.Name, errorMessage)
		end
	else
		warn("Save folder not found for player:", player.Name)
	end
end

local function loadModelFromDataStore(player)
	local savedData = DataSave:GetAsync(tostring(player.UserId))
	if savedData then
		print("Data loaded for player:", player.Name)
		for name, _ in pairs(savedData) do
			local vehicle = ServerStorage.Vehicles:FindFirstChild(name)
			if vehicle then
				vehicle:Clone().Parent = ServerStorage.PurchasedVehicles:FindFirstChild(player.UserId)
				print("Loaded:", name)
			else
				print("Vehicle not found:", name)
			end
		end
	else
		print("No saved data found for player:", player.Name)
	end
end

game.Players.PlayerRemoving:Connect(saveModelToDataStore)

game.Players.PlayerAdded:Connect(function(player)
	local PlayerPurchasedVehiclesFolder = Instance.new("Folder", ServerStorage.PurchasedVehicles)
	PlayerPurchasedVehiclesFolder.Name = player.UserId
	wait(1) -- Introduce a delay before loading data to ensure the folder is properly created
	loadModelFromDataStore(player)
end)
